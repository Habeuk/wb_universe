<?php
/**
 * TwBeereMPLI888
 * file template
 */
use Drupal\wb_universe\MdbootstrapWbu;
use Drupal\Component\Render\FormattableMarkup;
use Drupal\Core\Template\Attribute;
use Stephane888\HtmlBootstrap\SuggestionsMenus;
use Stephane888\HtmlBootstrap\Controller\Menus;
use Drupal\node\NodeInterface;
use Drupal\Component\Utility\NestedArray;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\wb_universe\ThemeSettings;

/**
 * config off theme
 */
require_once ('inc/config.inc');

require_once ('inc/views.inc');

/**
 * Action Ajax for theme
 */
// require_once ('inc/ajaxtheme.inc');

/**
 * implement hook_css_alter.
 * pour mettre les fichiers du module formatage_models apres ceux des themes.
 *
 * @param array $css
 * @param \Drupal\Core\Asset\AttachedAssetsInterface $assets
 */
function wb_universe_css_alter(&$css, \Drupal\Core\Asset\AttachedAssetsInterface $assets) {
  foreach ($css as $uri => $library) {
    if (\strripos($uri, "formatage_models/layouts")) {
      $css[$uri]['group'] = 100;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for menu-local-action.html.twig.
 */
function wb_universe_preprocess_menu_local_action(&$vars) {
  $useBtOutline = theme_get_setting('bootstrap_barrio_button_outline');
  if ($useBtOutline && $vars['link']['#options']) {
    if (!empty($vars['link']['#options']['attributes']['class'])) {
      // remove all class begin by btn-*
      foreach ($vars['link']['#options']['attributes']['class'] as $k => $value) {
        if (strpos($value, "btn-") !== false) {
          unset($vars['link']['#options']['attributes']['class'][$k]);
        }
      }
    }
    // Add outline btn.
    $vars['link']['#options']['attributes']['class'][] = 'btn-outline-secondary';
  }
}

/**
 * Use this fonction on module to alert meta data
 * mymodule_page_attachments_alter(array &$page)
 *
 * @param array $variables
 */
function wb_universe_preprocess_html(&$variables) {
  $_css = [];
  if (\Drupal\user\Entity\User::load(\Drupal::currentUser()->id())->hasRole('administrator')) {
    $_css[] = 'administrator';
  }
  // Add.
  $variables['is_front'] = \Drupal::service('path.matcher')->isFrontPage();
  if ($variables['is_front']) {
    $_css[] = 'front-page';
  }
  else {
    $_css[] = 'not-front-page';
  }
  if (!empty($_css)) {
    $variables['html_attributes']->setAttribute('class', $_css);
  }
  if ($IdAnalytique = theme_get_setting('google-analytics-gtag')) {
    $scriptUrl = [
      '#tag' => 'script',
      '#attributes' => [
        'async',
        'src' => 'https://www.googletagmanager.com/gtag/js?id=' . $IdAnalytique
      ]
    ];
    $scriptInit = [
      '#tag' => 'script',
      '#value' => "window.dataLayer = window.dataLayer || [];
              function gtag(){dataLayer.push(arguments);}
              gtag('js', new Date());
              gtag('config', '$IdAnalytique');
            "
    ];
    $variables['page']['#attached']['html_head'][] = [
      $scriptUrl,
      'google-analytics-gtag'
    ];
    $variables['page']['#attached']['html_head'][] = [
      $scriptInit,
      'google-analytics-gtag-value'
    ];
  }
  // Ajout du script pour skripe v3 ( on doit mettre une variable pour
  // conditionner l'affichage et gerer la version ).
  $scriptStripe = [
    '#tag' => 'script',
    '#attributes' => [
      'async' => "async",
      'src' => 'https://js.stripe.com/v3/'
    ]
  ];
  $variables['page']['#attached']['html_head'][] = [
    $scriptStripe,
    'stripe-api-js'
  ];
  //
}

/**
 * Implement hook_preprocess_page
 */
function wb_universe_preprocess_page(&$variables) {
  // MdbootstrapWbu::wbupreprocess_page($variables);
  $routeName = \Drupal::routeMatch()->getRouteName();
  /**
   * wb_universe_pages:
   * applique les classes et ou configuration provenant de la configuration du
   * theme.
   */
  $class = theme_get_setting('wb_universe_pages.search.' . ThemeSettings::getValidKeyForConfig($routeName));
  if (!$class) {
    $class = theme_get_setting('wb_universe_pages.views.' . ThemeSettings::getValidKeyForConfig($routeName));
  }
  if ($class) {
    $variables["attributes_container"] = $class;
  }
  /**
   * Build layouts
   */
  $wb_universe_layout = theme_get_setting('wb_universe_layout');
  if (!empty($wb_universe_layout)) {
    $show_sidebar_left = $wb_universe_layout['sidebar_left']['show'] ?? false;
    $show_sidebar_right = $wb_universe_layout['sidebar_right']['show'] ?? false;
    $variables['show_sidebar_left'] = $show_sidebar_left;
    $variables['show_sidebar_right'] = $show_sidebar_right;
    if (!empty($variables['page']['sidebar_left']) || !empty($variables['page']['sidebar_right'])) {
      ThemeSettings::$hasSideBar = true;
    }
    // if (($show_sidebar_left || $show_sidebar_right) &&
    // (!empty($variables['page']['sidebar_left']))) {
    // $variables['attributes_container'] =
    // $wb_universe_layout['attributes_container'];
    // if (!empty($variables['page']['sidebar_left'])) {
    // $AttributeLeft = new Attribute();
    // $AttributeLeft->addClass($wb_universe_layout['sidebar_left']['class']);
    // }
    // $variables['page']['sidebar_left']['attributes']['class'][] =
    // 'kksa8882025';
    // dump($variables['page']);
    // }
  }
}

/**
 *
 * @param array $variables
 */
function wb_universe_preprocess_region__sidebar_left(&$vars) {
  $wb_universe_layout = theme_get_setting('wb_universe_layout');
  $vars['attributes']['class'][] = $wb_universe_layout['sidebar_left']['class'];
}

/**
 *
 * @param array $variables
 */
function wb_universe_preprocess_region__sidebar_right(&$vars) {
  $wb_universe_layout = theme_get_setting('wb_universe_layout');
  $vars['attributes']['class'][] = $wb_universe_layout['sidebar_right']['class'];
}

/**
 *
 * @param array $variables
 */
function wb_universe_preprocess_region__content(&$vars) {
  _apply_style_region__content($vars);
}

/**
 * Cette region est definie par le theme bootstrap_barrio.
 *
 * @param array $vars
 */
function wb_universe_preprocess_region__nowrap(&$vars) {
  if ($vars['elements']['#region'] == 'content') {
    _apply_style_region__content($vars);
  }
}

function _apply_style_region__content(&$vars) {
  if (ThemeSettings::$hasSideBar) {
    $wb_universe_layout = theme_get_setting('wb_universe_layout');
    $vars['attributes']['class'][] = $wb_universe_layout['content']['class'];
  }
}

/**
 * Implemente hook_theme_suggestions_HOOK_alter
 *
 * @param int $suggestions
 * @param int $variables
 */
function wb_universe_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  /**
   *
   * @var \Drupal\taxonomy\Entity\Term $taxonomy_term
   */
  $taxonomy_term;
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    // $suggestions[] = 'page__' . $node->bundle() . '_node';
    $field_name = "layout_builder__layout";
    if ($node instanceof NodeInterface && $node->hasField($field_name)) {
      $suggestions[] = 'page__layout_builder';
      $suggestions[] = 'page__' . $node->bundle() . '__layout';
    }
  }
  elseif ($taxonomy_term = \Drupal::routeMatch()->getParameter('taxonomy_term')) {
    $suggestions[] = 'page__vocab_' . $taxonomy_term->bundle();
  }
}

/**
 * implemente hook_theme_suggestions_HOOK_alter.
 *
 * @param int $suggestions
 * @param int $variables
 */
function wb_universe_theme_suggestions_user_alter(array &$suggestions, array $variables) {
  if (!empty($variables["elements"]["#view_mode"])) {
    $suggestions[] = 'user__' . $variables["elements"]["#view_mode"];
  }
}

function wb_universe_preprocess_comment__comment(&$variables) {
  $variables['user_picture_header'] = $variables['user_picture'];
  $variables['user_picture_header']['#theme'] = 'user__comment';
}

function wb_universe_preprocess_field(&$variables) {
  /**
   * Class for type boolean.
   */
  if (isset($variables['element']['#field_type']) && $variables['element']['#field_type'] == 'boolean') {
    $value = $variables['element']['#object']->get($variables['field_name'])->getValue();
    if (!empty($value[0])) {
      $variables['attributes']['class'][] = 'boolean-' . $value[0]['value'];
    }
  }
  /**
   * for link
   * Pour ces derniers on doit recuperer la css definie au niveau du
   * content_attributes ( add by formatage_models ) et ajouter au niveau de la
   * balise <a>.
   */
  elseif ($variables['field_type'] == 'link') {
    if ($variables['content_attributes'])
      foreach ($variables['items'] as &$value) {
        if (!empty($value['attributes'])) {
          if (!empty($value['content']['#options']['attributes'])) {
            if (is_array($value['content']['#options']['attributes'])) {
              if (empty($value['content']['#options']['attributes']['class']))
                $value['content']['#options']['attributes']['class'] = [];
              $value['content']['#options']['attributes']['class'] += $value['attributes']->toArray()["class"];
            }
            else
              $value['content']['#options']['attributes']->merge($value['attributes']);
          }
          else {
            $value['content']['#options']['attributes'] = $value['attributes']->toArray();
          }
        }
      }
  }
  /**
   * for node link
   */
  elseif (isset($variables['element']['#field_name']) && $variables['element']['#field_name'] == 'node_link') {
    foreach ($variables['items'] as $key => $value) {
      // debugLog::logs( $variables['items'] , 'field_link_items', 'kint',
      // true);
      $variables['items'][$key]['attributes']->addClass('btn');
      $variables['items'][$key]['attributes']->addClass('btn-outline-danger');
    }
  }
  // else {
  // if ($variables['field_name'] == 'field_call_to_action')
  // dump($variables);
  // }
}

/**
 *
 * @param array $variables
 */
function wb_universe_preprocess_image_url(&$variables) {
  if (isset($variables['image_style'])) {
    $image_style = \Drupal\image\Entity\ImageStyle::load($variables['image_style']);
    if ($image_style) {
      $variables['image_url'] = $image_style->buildUrl($variables['file']->getFileUri());
    }
  }
}

/**
 * implement hook_theme
 *
 * @param int $existing
 * @param int $type
 * @param int $theme
 * @param int $path
 * @return NULL[][][]
 */
function wb_universe_theme($existing, $type, $theme, $path) {
  return MdbootstrapWbu::LoadTemplates('wb_universe');
}

/**
 * implement hook_preprocess_HOOK
 */
function wb_universe_preprocess_menu(&$variables) {
  if ($variables['theme_hook_original'] != 'menu__toolbar__admin') {
    $theme_hook_original = $variables['theme_hook_original'];
    /**
     * Il faut creer en Admin l'item user/register=>inscription.
     * De plus, il faut supprimer user/register si l'utilisateur est connecté.
     */
    if ($theme_hook_original == 'menu__account') {
      /**
       * remove user.register if user is connecté.
       */
      if (\Drupal::currentUser()->isAuthenticated()) {
        $variables['items'] = Menus::MenuDeleteIemByRouteName($variables['items'], 'user.register');
      }
      if (TEMPLATE_menu__account == 'menu__account_icon') {
        $icones = [
          'user.page' => '<i class="fas fa-user-tie pr-1"></i>',
          'user.logout' => '<i class="fas fa-unlock-alt pr-1"></i>',
          'user.login' => '<i class="fas fa-sign-in-alt pr-1"></i>',
          'user.register' => '<i class="fas fa-user-tie pr-1"></i>'
        ];
        $variables['items'] = Menus::MenuAddIcones($variables['items'], $icones);
      }
    }
    else
      if ($theme_hook_original == 'menu__main') {
        if (TEMPLATE_menu__main == 'menu__main_full') {
        /**
         * Nothing to do for now.
         */
        }
      }
  }
}

// function wb_universe_preprocess_links(&$variables) {
// }

/**
 * Implements hook_preprocess_HOOK() for region.html.twig.
 */
function wb_universe_theme_suggestions_input_alter(array &$suggestions, array $variables) {
  if ($variables['element']['#type'] == 'submit') {
    $suggestions[] = 'input__submit_button';
  }
  //
  if (!empty($variables['element']['#wbu_theme_icon'])) {
    $suggestions[] = $variables['theme_hook_original'] . '__' . $variables['element']['#wbu_theme_icon']['icon_theme'];
  }
}

/**
 * implement hook_theme_suggestions_HOOK_alter()
 * ALter menu.
 * This hook allows any module or theme to provide alternative theme function or
 * template name suggestions and reorder or remove suggestions provided by
 * hook_theme_suggestions_HOOK()
 */
function wb_universe_theme_suggestions_menu_alter(array &$suggestions, array &$variables, $hook) {
  if ($variables['theme_hook_original'] != 'menu__toolbar__admin') {
    $theme_hook_original = $variables['theme_hook_original'];
    $options = [];
    if ($theme_hook_original == 'menu__account') {
      $options['template'] = TEMPLATE_menu__account;
    }
    else
      if ($theme_hook_original == 'menu__main') {
        $options['template'] = TEMPLATE_menu__main;
      }
    $new_suggestions = SuggestionsMenus::Suggestions($theme_hook_original, $options);
    foreach ($new_suggestions as $value) {
      $suggestions[] = $value;
    }
  }
}

/**
 * implement hook_theme_suggestions_HOOK_alter()
 */
function wb_universe_theme_suggestions_block_alter(array &$suggestions, array &$variables, $hook) {
  if (!empty($variables['elements']['#id'])) {
    /**
     * Formatage du container main menu.
     */
    if (isset($variables['elements']["#plugin_id"]) && $variables['elements']["#plugin_id"] == 'system_menu_block:main') {
      if (TEMPLATE_menu__main == 'menu__main_full') {
        $suggestions[] = 'block__' . TEMPLATE_menu__main;
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for region.html.twig.
 */
function wb_universe_preprocess_region(&$variables) {
  if (!empty($variables['attributes']['class'][0]))
    $variables['attributes']['class'][0] = 'row-0';
}

/**
 *
 * @param int $variables
 */
function wb_universe_preprocess_image(&$variables) {
  $variables["attributes"]['class'][] = 'img-fluid';
}

function wb_universe_preprocess_form_element(&$variables) {
  if (!empty($variables["element"]["#type"])) {
    $inputs = [
      'textfield',
      'email',
      "textarea",
      "select",
      "checkbox",
      "checkboxes",
      "radios"
    ];
    if ($variables['element']['#type'] == 'checkbox') {
      if (!empty($variables["label"]["#children"])) {
        $variables["children"] = new FormattableMarkup($variables["label"]["#children"], []);
        $variables["label"]['#attributes']['class'][] = 'custom-control-label';
        unset($variables["label"]["#children"]);
      }
    }
    elseif (in_array($variables["element"]["#type"], $inputs)) {
      // On ajoute la possiblité d'ajouter des class provenant de la
      // configuration du theme.
      $wb_universe_forms = theme_get_setting('wb_universe_forms');
      if (!empty($wb_universe_forms[$variables["element"]["#type"]]))
        $variables['attributes']['class'][] = $wb_universe_forms[$variables["element"]["#type"]];
    }
  }
}

function wb_universe_element_info_alter(array &$types) {
  if (!empty($types['vertical_tabs'])) {
    // $types['vertical_tabs']['#pre_render'][] = [
    // \Drupal\wb_universe\Render\Element\VerticalTabs::class,
    // 'processVerticalTabs'
    // ];
  }
}

function wb_universe_preprocess_select(&$variables) {
  /**
   * Ajout de la class form-control
   */
  $variables['attributes']['class'][] = 'form-control';
}

/**
 *
 * @param
 *        $variables
 */
function wb_universe_preprocess_fieldset(&$variables) {
  /**
   * Recuperer les classes passée aux niveaux hook_form_alter et les ajouter.
   */
  // Class pour le titre.
  if (!empty($variables['element']['#legend'])) {
    /**
     *
     * @var Drupal\Core\Template\Attribute $attribute
     */
    $attribute = $variables['legend']['attributes'];
    if (!empty($variables['element']['#legend']['attributes']))
      foreach ($variables['element']['#legend']['attributes'] as $k => $value) {
        $attribute->setAttribute($k, $value);
      }
    $variables['legend']['attributes'] = $attribute;
    //
    if (!empty($variables['children'])) {
      $variables['children'] = [
        '#type' => 'html_tag',
        '#tag' => 'div',
        '#attributes' => [
          'class' => [
            ""
          ]
        ],
        '#value' => $variables['children']
      ];
    }
    // dump($variables);
    // dump($variables['children']);
  }
}

function wb_universe_preprocess_vertical_tabs__panels_card(&$vars) {
  // $elements = Element::children($vars['element']['group']);
  // foreach ($elements as $delta) {
  // $header_attributes = new Attribute();
  // $header_attributes->addClass('card-header bg-info');
  // $vars['element']['group'][$delta]['header_attributes'] =
  // $header_attributes;
  // }
}

/**
 * implements hook_preprocess_details__panels_card
 *
 * @param array $vars
 */
function wb_universe_preprocess_details__panels_card(&$vars) {
  $vars['attributes']['class'][] = 'accordion';
  if (empty($vars['element']['#id'])) {
    $id = 'accordion-' . rand(50, 9888);
  }
  else
    $id = $vars['element']['#id'];
  $body_id = $id . 'body';
  $header_id = $id . 'header';
  /**
   *
   * @var \Drupal\Core\Template\Attribute $summary_attributes
   */
  $summary_attributes = $vars['summary_attributes'];
  $summary_attributes->addClass('btn btn-block text-left');
  $summary_attributes->setAttribute('type', 'button');
  $summary_attributes->setAttribute('data-toggle', 'collapse');
  $summary_attributes->setAttribute('data-target', '#' . $body_id);
  $summary_attributes->setAttribute('aria-expanded', 'true');
  $summary_attributes->setAttribute('aria-controls', $body_id);
  // body attributes
  $body_attributes = new Attribute();
  $body_attributes->addClass('collapse');
  $body_attributes->setAttribute('id', $body_id);
  $body_attributes->setAttribute('aria-labelledby', $header_id);
  if (!empty($vars['element']['#id']))
    $body_attributes->setAttribute('data-parent', '#' . $id);
  if (!empty($vars['element']['#open'])) {
    $body_attributes->addClass('show');
  }
  $vars['body_attributes'] = $body_attributes;
  // header_attributes
  $header_attributes = new Attribute();
  $header_attributes->addClass('card-header');
  $header_attributes->setAttribute('id', $header_id);
  $vars['header_attributes'] = $header_attributes;
}

function wb_universe_preprocess_file_upload_help(&$variables) {
  if (!empty($variables['popover']) && !empty($variables['popover']['requirements']['#attributes'])) {
    $variables['popover']['requirements']['#attributes']['class'] = [];
    $variables['popover']['requirements']['#attributes']['class'][] = 'help-block';
  }
}

/**
 *
 * @param
 *        $variables
 */
function wb_universe_preprocess_page_title(&$variables) {
  if (is_array($variables["title"]) && empty($variables["title"]["#markup"])) {
    $variables["title"]["#printed"] = false;
  }
}

/**
 * implemente hook_theme_suggestions_HOOK_alter
 *
 * @param int $suggestions
 * @param int $variables
 * @param int $hook
 */
function wb_universe_theme_suggestions_node_alter(array &$suggestions, array $variables) {
  if (!empty($variables["elements"]["#view_mode"])) {
    $suggestions[] = 'node__modele_' . $variables["elements"]["#view_mode"];
  }
}

/**
 * implemente hook_theme_suggestions_HOOK_alter
 *
 * @param int $suggestions
 * @param int $variables
 * @param int $hook
 */
function wb_universe_theme_suggestions_links_alter(array &$suggestions, array $variables) {
  if (!empty($variables['links']['node-readmore'])) {
    $suggestions[] = 'links__node_readmore';
    $suggestions[] = 'links__node_' . $variables['links']['node-readmore']['url']->getOption('entity')->getType();
  }
}

/**
 * implemente hook_theme_suggestions_HOOK_alter
 *
 * @param array $suggestions
 * @param array $variables
 */
function wb_universe_theme_suggestions_form_element_alter(array &$suggestions, array $variables) {
  // on verifie s'il ya une demande de surchage
  if (!empty($variables['element']['#attributes']['data-twig'])) {
    $suggestions[] = 'form_element__' . $variables['element']['#attributes']['data-twig'];
  }
  elseif (!empty($variables['element']['#type'])) {
    $suggestions[] = 'form_element__' . $variables['element']['#type'];
  }
}

/**
 *
 * @param array $suggestions
 * @param array $variables
 */
function wb_universe_theme_suggestions_details_alter(array &$suggestions, array $variables) {
  if (!empty($variables['element']['#type'])) {
    $suggestions[] = 'details__panels_card';
  }
}

/**
 *
 * @param array $suggestions
 * @param array $variables
 */
function wb_universe_theme_suggestions_vertical_tabs_alter(array &$suggestions, array $variables) {
  if (!empty($variables['element']['#type'])) {
    $suggestions[] = 'vertical_tabs__panels_card';
  }
}

/**
 * implemente hook_theme_suggestions_alter
 *
 * @param int $suggestions
 * @param int $variables
 * @param int $hook
 */
function wb_universe_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {
  if ($hook == 'layout') {
    $override = 'layout__' . $variables['theme_hook_original'];
    $suggestions[] = $override . '_default';
    $node = \Drupal::routeMatch()->getParameter('node');
    if ($node) {
      $suggestions[] = $override . '__' . $node->bundle();
      $suggestions[] = $override . '__' . $node->bundle() . '_' . $node->id();
    }
  }
}

/**
 * implement hook_preprocess_input__submit__icon
 *
 * @param array $variables
 * @throws Exception
 */
function wb_universe_preprocess_input__submit__icon(array &$variables) {
  $buttonIcon = [];
  if (!empty($variables['element']['#wbu_theme_icon'])) {
    $setting = $variables['element']['#wbu_theme_icon'];
    if (empty($setting["icon_after"])) {
      $buttonIcon[] = [
        '#type' => "html_tag",
        '#tag' => 'i',
        '#value' => "",
        '#attributes' => [
          'class' => [
            $setting["icon"]
          ]
        ]
      ];
    }
    if (empty($setting["hidde_text"])) {
      $buttonIcon[] = [
        '#type' => 'inline_template',
        '#template' => $variables['element']['#value']
      ];
      // ;
    }
    if (!empty($setting["icon_after"])) {
      $buttonIcon[] = [
        '#type' => "html_tag",
        '#tag' => 'i',
        '#value' => "",
        '#attributes' => [
          'class' => [
            $setting["icon"]
          ]
        ]
      ];
    }
    $variables['wbu_render'] = $buttonIcon;
    if (!empty($variables['attributes'])) {
      if ($setting['clean_class']) {
        /**
         *
         * @var \Drupal\Core\Template\AttributeArray $class
         */
        $class = $variables['attributes']->getClass();
        $variables['attributes']->removeClass($class->value());
        $variables['attributes']->addClass($setting['class']);
      }
      else {
        $variables['attributes']->addClass($setting['class']);
      }
    }
  }
  else {
    throw new Exception("wbu_theme_icon n'est pas definit");
  }
}

/**
 * Implemente template_preprocess_radios
 *
 * @param array $vars
 */
function wb_universe_preprocess_radios(&$vars) {
  // Avec la function template_preprocess_radios on ne peut pas passer des
  // attributes au container des radios.
  if (!empty($vars['element']['#wrapper_attributes'])) {
    $vars['attributes'] = NestedArray::mergeDeep($vars['attributes'], $vars['element']['#wrapper_attributes']);
  }
}

/**
 *
 * @param array $form
 * @param FormStateInterface $form_state
 */
function wb_universe_form_views_exposed_form_alter(&$form, FormStateInterface $form_state) {
  $keys = Element::children($form);
  $ignorefields = [
    'form_build_id',
    'form_id',
    'form_token'
  ];
  foreach ($keys as $field_input) {
    if (!in_array($field_input, $ignorefields)) {
      if ('actions' == $field_input) {
        $form[$field_input]['submit']['#attributes']['class'][] = 'btn btn-primary';
        $form[$field_input]['submit']['#attributes']['class'][] = 'btn-lg';
      }
      else {
        $form[$field_input]['#attributes']['class'][] = 'form-control-lg';
        $form[$field_input]['#theme_wrappers'][] = 'form_element__clean';
      }
    }
  }
}


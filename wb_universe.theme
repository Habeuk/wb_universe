<?php
use Drupal\Component\Render\FormattableMarkup;
use Drupal\Core\Form\FormStateInterface;
use Drupal\wb_universe\ThemeSettings;
use Drupal\Core\Render\Element;

/**
 * Use this fonction on module to alert meta data
 * mymodule_page_attachments_alter(array &$page)
 *
 * @param array $variables
 */
function wb_universe_preprocess_html(&$variables) {
  $_css = [];
  $uid = \Drupal::currentUser()->id();
  if ($uid && \Drupal\user\Entity\User::load($uid)->hasRole('administrator')) {
    $_css[] = 'administrator';
  }
  // Add.
  $variables['is_front'] = \Drupal::service('path.matcher')->isFrontPage();
  if ($variables['is_front']) {
    $_css[] = 'front-page';
  }
  else {
    $_css[] = 'not-front-page';
  }
  if (!empty($_css)) {
    $variables['html_attributes']->setAttribute('class', $_css);
  }
  if ($IdAnalytique = theme_get_setting('google-analytics-gtag')) {
    $scriptUrl = [
      '#tag' => 'script',
      '#attributes' => [
        'async',
        'src' => 'https://www.googletagmanager.com/gtag/js?id=' . $IdAnalytique
      ]
    ];
    $scriptInit = [
      '#tag' => 'script',
      '#value' => "window.dataLayer = window.dataLayer || [];
              function gtag(){dataLayer.push(arguments);}
              gtag('js', new Date());
              gtag('config', '$IdAnalytique');
            "
    ];
    $variables['page']['#attached']['html_head'][] = [
      $scriptUrl,
      'google-analytics-gtag'
    ];
    $variables['page']['#attached']['html_head'][] = [
      $scriptInit,
      'google-analytics-gtag-value'
    ];
  }
  // Ajout du script pour skripe v3 ( on doit mettre une variable pour
  // conditionner l'affichage et gerer la version ).
  $scriptStripe = [
    '#tag' => 'script',
    '#attributes' => [
      'async' => "async",
      'src' => 'https://js.stripe.com/v3/'
    ]
  ];
  $variables['page']['#attached']['html_head'][] = [
    $scriptStripe,
    'stripe-api-js'
  ];
}

/**
 * Implement hook_preprocess_page
 */
function wb_universe_preprocess_page(&$variables) {
  // MdbootstrapWbu::wbupreprocess_page($variables);
  $routeName = \Drupal::routeMatch()->getRouteName();
  /**
   * wb_universe_pages:
   * applique les classes et ou configuration provenant de la configuration du
   * theme.
   */
  $class = theme_get_setting('wb_universe_pages.terms.' . ThemeSettings::getValidKeyForConfig($routeName));
  if (!$class) {
    $class = theme_get_setting('wb_universe_pages.search.' . ThemeSettings::getValidKeyForConfig($routeName));
  }
  if (!$class) {
    $class = theme_get_setting('wb_universe_pages.views.' . ThemeSettings::getValidKeyForConfig($routeName));
  }
  
  if ($class) {
    $variables["attributes_container"] = $class;
  }
  
  /**
   * Build layouts
   */
  $wb_universe_layout = theme_get_setting('wb_universe_layout');
  if (!empty($wb_universe_layout)) {
    $show_sidebar_left = $wb_universe_layout['sidebar_left']['show'] ?? false;
    $show_sidebar_right = $wb_universe_layout['sidebar_right']['show'] ?? false;
    $variables['show_sidebar_left'] = $show_sidebar_left;
    $variables['show_sidebar_right'] = $show_sidebar_right;
    if (!empty($variables['page']['sidebar_left']) || !empty($variables['page']['sidebar_right'])) {
      ThemeSettings::$hasSideBar = true;
    }
  }
}

/**
 * implement hook_page_attachments_alter
 *
 * @param array $attachments
 */
function wb_universe_page_attachments_alter(array &$attachments) {
  $stripe_settings = theme_get_setting('stripe_settings');
  $general_settings = theme_get_setting('general_settings');
  if (!empty($general_settings['load_bootstrap'])) {
    $attachments["#attached"]["library"][] = "wb_universe/bootstrap_default";
  }
  if (!empty($stripe_settings['load_stripe'])) {
    $attachments["#attached"]["library"][] = "wb_universe/stripe_v3";
  }
}

/**
 * Formatage des champs.
 *
 * @param array $variables
 */
function wb_universe_preprocess_field(&$variables) {
  /**
   * Class for type boolean.
   */
  if (isset($variables['element']['#field_type']) && $variables['element']['#field_type'] == 'boolean') {
    $value = $variables['element']['#object']->get($variables['field_name'])->getValue();
    if (!empty($value[0])) {
      $variables['attributes']['class'][] = 'boolean-' . $value[0]['value'];
    }
  }
  /**
   * for link
   * Pour ces derniers on doit recuperer la css definie au niveau du
   * content_attributes ( add by formatage_models ) et ajouter au niveau de la
   * balise <a>.
   */
  elseif ($variables['field_type'] == 'link') {
    if ($variables['content_attributes'])
      foreach ($variables['items'] as &$value) {
        if (!empty($value['attributes'])) {
          if (!empty($value['content']['#options']['attributes'])) {
            if (is_array($value['content']['#options']['attributes'])) {
              if (empty($value['content']['#options']['attributes']['class']))
                $value['content']['#options']['attributes']['class'] = [];
              $value['content']['#options']['attributes']['class'] += $value['attributes']->toArray()["class"];
            }
            else
              $value['content']['#options']['attributes']->merge($value['attributes']);
          }
          else {
            $value['content']['#options']['attributes'] = $value['attributes']->toArray();
          }
        }
      }
  }
  /**
   * for node link
   */
  elseif (isset($variables['element']['#field_name']) && $variables['element']['#field_name'] == 'node_link') {
    foreach ($variables['items'] as $key => $value) {
      $variables['items'][$key]['attributes']->addClass('btn');
      $variables['items'][$key]['attributes']->addClass('btn-outline-primary');
    }
  }
}

function wb_universe_preprocess_image(&$variables) {
  $variables['attributes']['class'][] = 'img-fluid';
}

/**
 * On surcharge les buttons qui ne le sont pas.
 *
 * @param array $variables
 */
function wb_universe_preprocess_input__submit(&$variables) {
  $class = [
    'btn'
  ];
  if (!empty($variables['element']['#button_type']) && $variables['element']['#button_type'] == 'primary') {
    $class[] = 'btn-primary';
  }
  else {
    $class[] = 'btn-outline-secondary';
  }
  if (!empty($variables['attributes'])) {
    if (!empty($variables['attributes']['class'])) {
      if (!in_array('btn', $variables['attributes']['class']))
        $variables['attributes']['class'] = $class;
    }
  }
  else {
    $variables['attributes']['class'] = $class;
  }
}

function wb_universe_preprocess_menu_local_task(&$variables) {
  /**
   * $variables['link']['#options']['Attributes'] must be array.
   */
  if (isset($variables['link']['#options']['attributes'])) {
    $variables['link']['#options']['Attributes']['class'][] = 'nav-link';
  }
  else {
    $variables['link']['#options']['attributes'] = [
      'class' => [
        'nav-link'
      ]
    ];
  }
}

/**
 * Implements hook_preprocess_HOOK() menu__main
 */
function wb_universe_preprocess_menu(&$variables) {
  $class_menu = theme_get_setting('wb_universe_menus.' . $variables['menu_name'] . 'class_menu');
  if (!empty($class_menu))
    $variables['attributes']['class'][] = $class_menu;
}

/**
 *
 * @param array $variables
 */
function wb_universe_preprocess_pager(&$variables) {
  if (!empty($variables['items']['next'])) {
    $variables['items']['next']['attributes']->addClass('page-link');
  }
  if (!empty($variables['items']['first'])) {
    $variables['items']['first']['attributes']->addClass('page-link');
  }
  if (!empty($variables['items']['last'])) {
    $variables['items']['last']['attributes']->addClass('page-link');
  }
  if (!empty($variables['items']['previous'])) {
    $variables['items']['previous']['attributes']->addClass('page-link');
  }
  if (!empty($variables['items']['pages'])) {
    foreach ($variables['items']['pages'] as &$item) {
      $item['attributes']->addClass('page-link');
    }
  }
}

/**
 * Implement hook_form_alter
 *
 * @param array $variables
 */
function wb_universe_preprocess_input(&$variables) {
  if (in_array($variables['element']['#type'], ThemeSettings::$control_inputs)) {
    $variables['attributes']['class'][] = 'form-control';
  }
  elseif (in_array($variables['element']['#type'], ThemeSettings::$check_inputs)) {
    $variables['attributes']['class'][] = 'form-check-input';
  }
}

/**
 * Implement hook_form_alter
 *
 * @param array $variables
 */
function wb_universe_preprocess_textarea(&$variables) {
  $variables['attributes']['class'][] = 'form-control';
}

function wb_universe_preprocess_form_element(&$variables) {
  if (!empty($variables["element"]["#type"])) {
    // if ($variables['element']['#type'] == 'checkbox') {
    // if (!empty($variables["label"]["#children"])) {
    // $variables["children"] = new
    // FormattableMarkup($variables["label"]["#children"], []);
    // $variables["label"]['#attributes']['class'][] = 'custom-control-label';
    // unset($variables["label"]["#children"]);
    // }
    // }
    
    // On ajoute la possiblité d'ajouter des class provenant de la
    // configuration du theme.
    $wb_universe_forms = theme_get_setting('wb_universe_forms');
    if (!empty($wb_universe_forms[$variables["element"]["#type"]]))
      $variables['attributes']['class'][] = $wb_universe_forms[$variables["element"]["#type"]];
    // On ajoute les class sur les labels
    if (in_array($variables['element']['#type'], ThemeSettings::$control_inputs)) {
      $variables['label']['#attributes']['class'][] = 'form-label';
    }
    elseif (in_array($variables['element']['#type'], ThemeSettings::$check_inputs)) {
      $variables['label']['#attributes']['class'][] = 'form-check-label';
    }
  }
  // Le formatteur du label ne contient pas de type, on le passe à ce niveau.
  $variables['label']['#type_custom'] = $variables["element"]["#type"];
}

/**
 *
 * @param array $form
 * @param FormStateInterface $form_state
 */
function wb_universe_form_views_exposed_form_alter(&$form, FormStateInterface $form_state) {
  $class = theme_get_setting('wb_universe_forms.views_exposed_form.class');
  if ($class) {
    $keys = Element::children($form);
    $ignorefields = [
      'form_build_id',
      'form_id',
      'form_token'
    ];
    foreach ($keys as $field_input) {
      if (!in_array($field_input, $ignorefields)) {
        if ('actions' == $field_input) {
          $form[$field_input]['submit']['#attributes']['class'][] = 'btn btn-primary';
          $form[$field_input]['submit']['#attributes']['class'][] = 'btn-lg';
        }
        else {
          // if ($form[$field_input]['#type'] !== 'radios') {
          // }
          $form[$field_input]['#attributes']['class'][] = $class;
          $form[$field_input]['#theme_wrappers'][] = 'form_element__clean';
        }
      }
    }
  }
}

function wb_universe_theme_suggestions_menu_alter(array &$suggestions, array $variables) {
  if (!empty($variables['menu_name'])) {
    $suggestion = theme_get_setting('hbk_cforge_menu_display.' . $variables['menu_name'] . '.template');
    if ($suggestion) {
      $suggestions[] = 'menu__' . $suggestion;
    }
  }
}

/**
 *
 * @param array $variables
 */
function wb_universe_preprocess_region__sidebar_left(&$vars) {
  $wb_universe_layout = theme_get_setting('wb_universe_layout');
  $vars['attributes']['class'][] = $wb_universe_layout['sidebar_left']['class'];
}

/**
 *
 * @param array $variables
 */
function wb_universe_preprocess_region__sidebar_right(&$vars) {
  $wb_universe_layout = theme_get_setting('wb_universe_layout');
  $vars['attributes']['class'][] = $wb_universe_layout['sidebar_right']['class'];
}

/**
 *
 * @param array $variables
 */
function wb_universe_preprocess_region__content(&$vars) {
  _apply_style_region__content($vars);
}

/**
 * Cette region est definie par le theme bootstrap_barrio.
 *
 * @param array $vars
 */
function wb_universe_preprocess_region__nowrap(&$vars) {
  if ($vars['elements']['#region'] == 'content') {
    _apply_style_region__content($vars);
  }
}

function _apply_style_region__content(&$vars) {
  if (ThemeSettings::$hasSideBar) {
    $wb_universe_layout = theme_get_setting('wb_universe_layout');
    $vars['attributes']['class'][] = $wb_universe_layout['content']['class'];
  }
}
